#include "pch.h"
#include "CppUnitTest.h"

#include "../practice_vault/src/geometry.hpp"

using namespace Microsoft::VisualStudio::CppUnitTestFramework;

namespace test_method_add
{
	TEST_CLASS(test1)
	{
	public:
		
		TEST_METHOD(TestMethod1)
		{
			Point<int> p1(2.0, 2.0);
			Point<double> p2(1.0, 1.0);
			std::cout << (p1 + p2);
		}
		
	};


	TEST_CLASS(test2)
	{
	public:

		TEST_METHOD(TestMethod1)
		{
			Point<int> p1(2.0, 2.0);
			Point<double> p2(1.0, 1.0);
			std::cout << (p2 + p1);
		}

	};

	TEST_CLASS(test3)
	{
	public:

		TEST_METHOD(TestMethod1)
		{
			Point<double> p1(2.0, 2.0);
			Point<double> p2(1.0, 1.0);
			std::cout << (p1 + p2);
		}

	};
}



namespace test_method_minus
{
	TEST_CLASS(test1)
	{
	public:

		TEST_METHOD(TestMethod1)
		{
			Point<int> p1(2.0, 2.0);
			Point<double> p2(1.0, 1.0);
			std::cout << (p1 - p2);
		}

	};


	TEST_CLASS(test2)
	{
	public:

		TEST_METHOD(TestMethod1)
		{
			Point<int> p1(2.0, 2.0);
			Point<double> p2(1.0, 1.0);
			std::cout << (p2 - p1);
		}

	};

	TEST_CLASS(test3)
	{
	public:

		TEST_METHOD(TestMethod1)
		{
			Point<double> p1(2.0, 2.0);
			Point<double> p2(1.0, 1.0);
			std::cout << (p1 - p2);
		}

	};
}



namespace test_method_selfadd
{
	TEST_CLASS(test1)
	{
	public:

		TEST_METHOD(TestMethod1)
		{
			Point<int> p1(2.0, 2.0);
			Point<double> p2(1.01, 1.01);
			p1.print();
			p1 += p2;
			p1.print();
		}

	};


	TEST_CLASS(test2)
	{
	public:

		TEST_METHOD(TestMethod1)
		{
			Point<int> p1(2.0, 2.0);
			Point<double> p2(1.01, 1.01);
			p2.print();
			p2 += p1;
			p2.print();
		}

	};

	TEST_CLASS(test3)
	{
	public:

		TEST_METHOD(TestMethod1)
		{
			Point<int> p1(2.0, 2.0);
			Point<double> p2(1.01, 1.01);
			p2.print();
			p2 += p2;
			p2.print();
		}

	};
}



namespace test_method_selfminus
{
	TEST_CLASS(test1)
	{
	public:

		TEST_METHOD(TestMethod1)
		{
			Point<int> p1(2.0, 2.0);
			Point<double> p2(1.01, 1.01);
			p1.print();
			p1 -= p2;
			p1.print();
		}

	};


	TEST_CLASS(test2)
	{
	public:

		TEST_METHOD(TestMethod1)
		{
			Point<int> p1(2.0, 2.0);
			Point<double> p2(1.01, 1.01);
			p2.print();
			p2 -= p1;
			p2.print();
		}

	};

	TEST_CLASS(test3)
	{
	public:

		TEST_METHOD(TestMethod1)
		{
			Point<int> p1(2.0, 2.0);
			Point<double> p2(1.01, 1.01);
			p2.print();
			p2 -= p2;
			p2.print();
		}

	};
}



namespace test_distance
{
	TEST_CLASS(test1)
	{
	public:

		TEST_METHOD(TestMethod1)
		{
			Point<int> p1(2.0, 2.0);
			Point<double> p2(2.0, 2.0);
			p1.distance();
			p2.distance();
		}

	};


	TEST_CLASS(test2)
	{
	public:

		TEST_METHOD(TestMethod1)
		{
			Point<int> p1(1.0, 2.0);
			Point<double> p2(2.0, 2.0);
			p1.distance(p2);
		}

	};

	TEST_CLASS(test3)
	{
	public:

		TEST_METHOD(TestMethod1)
		{
			Point<int> p1(1.0, 2.0);
			Point<double> p2(2.0, 2.0);
			p2.distance(p1);
		}

	};
}

